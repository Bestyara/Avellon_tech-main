import subprocess
import zipfile
import os
import datetime
import sys
from tkinter import Tk, filedialog

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
DB_NAME = "Avellon_v7"
DB_USER = "postgres"
DB_HOST = "localhost"
DB_PASSWORD = "postgres"  # –õ—É—á—à–µ –≤–∑—è—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

FOLDER_TO_ARCHIVE_NAME = "projects"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
PG_DUMP_PATH = "pg_dump"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ PATH, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å

# === –ü—É—Ç–∏ ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
BACKUP_DIR = os.path.join(BASE_DIR, "backup")
FOLDER_TO_ARCHIVE = os.path.join(BASE_DIR, FOLDER_TO_ARCHIVE_NAME)
PROJECTS_DIR = os.path.join(BASE_DIR, "dump_projects")

def CreateBackup():
    os.makedirs(BACKUP_DIR, exist_ok=True)
    # === –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ===
    DATE = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    db_dump_file = os.path.join(BACKUP_DIR, f"db_backup_{DATE}.dump")
    zip_file = os.path.join(BACKUP_DIR, f"folder_backup_{DATE}.zip")

    # === –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –ë–î ===
    try:
        subprocess.run(
            [PG_DUMP_PATH, "-U", DB_USER, "-h", DB_HOST, "-F", "c", "-f", db_dump_file, DB_NAME],
            check=True,
            env={**os.environ, "PGPASSWORD": DB_PASSWORD}
        )
        print(f"‚úÖ –î–∞–º–ø –ë–î —Å–æ–∑–¥–∞–Ω: {db_dump_file}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∞–º–ø–µ –ë–î: {e}")
        exit(1)

    # === –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ø–∞–ø–∫–∏ ===
    if not os.path.isdir(FOLDER_TO_ARCHIVE):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {FOLDER_TO_ARCHIVE}")
        exit(1)

    try:
        with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(FOLDER_TO_ARCHIVE):
                for file in files:
                    full_path = os.path.join(root, file)
                    rel_path = os.path.relpath(full_path, FOLDER_TO_ARCHIVE)
                    zipf.write(full_path, arcname=rel_path)
        print(f"‚úÖ –ü–∞–ø–∫–∞ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {zip_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")

# === –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ===
def choose_file(files, description):
    if not files:
        print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {description} —Ñ–∞–π–ª–æ–≤.")
        sys.exit(1)

    print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ {description} —Ñ–∞–π–ª—ã:")
    for i, filename in enumerate(files, start=1):
        print(f"{i}. {filename}")

    while True:
        try:
            choice = int(input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä {description} —Ñ–∞–π–ª–∞: "))
            if 1 <= choice <= len(files):
                return files[choice - 1]
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# === GUI-–≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ ===
def select_file(filetypes, title):
    root = Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    file_path = filedialog.askopenfilename(
        title=title,
        initialdir=os.path.join(BASE_DIR, "backup"),
        filetypes=filetypes
    )
    root.destroy()
    if not file_path:
        print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –û—Ç–º–µ–Ω–∞.")
        sys.exit(1)
    return file_path

def RecoveryFromBackup():
    # === –®–∞–≥ 1: –≤—ã–±–æ—Ä –¥–∞–º–ø–∞ ===
    print("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–º–ø–∞ (.dump)")
    dump_path = select_file([("PostgreSQL Dump Files", "*.dump")], "–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–∞–º–ø–∞")

    # === –®–∞–≥ 2: –≤—ã–±–æ—Ä –∞—Ä—Ö–∏–≤–∞ ===
    print("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤ –ø–∞–ø–∫–∏ (.zip)")
    zip_path = select_file([("ZIP Archives", "*.zip")], "–í—ã–±–æ—Ä ZIP-–∞—Ä—Ö–∏–≤–∞")

    # === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î ===
    print(f"\n‚ñ∂ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑: {os.path.basename(dump_path)}")
    try:
        subprocess.run(
            ["pg_restore", "-U", DB_USER, "-h", DB_HOST, "-d", DB_NAME, "-c", dump_path],
            check=True,
            env={**os.environ, "PGPASSWORD": DB_PASSWORD}
        )
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        sys.exit(1)

    # === –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ ===
    print(f"\n‚ñ∂ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞: {os.path.basename(zip_path)}")
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(PROJECTS_DIR)
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {PROJECTS_DIR}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")

# CreateBackup()
# RecoveryFromBackup()